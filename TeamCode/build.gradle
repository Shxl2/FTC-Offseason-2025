//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here
plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "edu.wpi.first.GradleRIO" version "2025.1.1-beta-1"
    id 'edu.wpi.first.WpilibTools' version '1.3.0'

    id "com.diffplug.spotless" version "6.12.0"
}

wpi.maven.useLocal = false
wpi.maven.useDevelopment = true
wpi.versions.wpilibVersion = '2025.+'
wpi.versions.wpimathVersion = '2025.+'
wpilibTools.deps.wpilibVersion = wpi.versions.wpilibVersion.get()

def nativeConfigName = 'wpilibNatives'
def nativeConfig = configurations.create(nativeConfigName)

def nativeTasks = wpilibTools.createExtractionTasks {
    configurationName = nativeConfigName
}

// Include common definitions from above.
apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'

android {
    namespace = 'org.firstinspires.ftc.teamcode'

    packagingOptions {
        jniLibs.useLegacyPackaging true
    }
}

dependencies {
    implementation wpilibTools.deps.wpilibJava("wpiutil")
    implementation wpilibTools.deps.wpilibJava("wpimath")
    implementation wpilibTools.deps.wpilibJava("wpiunits")
    implementation wpilibTools.deps.wpilibJava("wpinet")
    implementation wpilibTools.deps.wpilibJava("ntcore")

    implementation project(':FtcRobotController')
    annotationProcessor files('lib/OpModeAnnotationProcessor.jar')

    implementation 'org.apache.commons:commons-math3:3.6.1'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7'

    api "org.ejml:ejml-simple:0.43.1"

    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation group: "us.hebi.quickbuf", name: "quickbuf-runtime", version: wpi.versions.quickbufVersion.get();
}

tasks.register('PullWPILibLibraries') {
    def f = file('src/main/jniLibs/arm64-v8a/libraries.zip')

    new URL('https://github.com/RisingNinjas-16391/wpilib_android/releases/latest/download/libraries.zip').withInputStream{ i -> f.withOutputStream{ it << i }}

    copy {
        from zipTree(f)
        into 'src/main/jniLibs/arm64-v8a'
    }
}

tasks.register('CopyPPFilesToControlHub', Exec) {
    executable 'adb'
    args 'push', 'TeamCode/src/main/assets/pathplanner', '/sdcard/FIRST'
}

// Spotless formatting
spotless {
    java {
        target fileTree(".") {
            include "**/*.java"
            exclude "**/build/**", "**/build-*/**"
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree(".") {
            include "**/*.gradle"
            exclude "**/build/**", "**/build-*/**"
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    json {
        target fileTree(".") {
            include "**/*.json"
            exclude "**/build/**", "**/build-*/**"
        }
        gson().indentWithSpaces(2)
    }
    format "misc", {
        target fileTree(".") {
            include "**/*.md", "**/.gitignore"
            exclude "**/build/**", "**/build-*/**"
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
